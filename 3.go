package main

import (
	"fmt"
	"sync"
	"sync/atomic"
)

/*
Дана последовательность чисел: 2,4,6,8,10.
Найти сумму их квадратов(2^2+3^2+4^2+...) с использованием конкурентных вычислений.
*/

// вариант первый: используем атомарную операцию прибавления
func v1() {
	var (
		count int64
		wg    sync.WaitGroup
	)

	arr := []int64{2, 4, 6, 8, 10}

	for _, now := range arr {
		// добавление в группу синхронизации("увеличение" счётчика работающих горутин)
		wg.Add(1)

		go func(now int64) {
			// удаление из группы синхронизации("уменьшение" счётчика работающих горутин)
			defer wg.Done()
			// используя атомарную операцию сложения, прибавлям к count очередной квадрат
			atomic.AddInt64(&count, now*now)
		}(now)
	}

	// ождание заврешения всех горутин
	wg.Wait()
	fmt.Println(count)
}

// вариант второй: используем AtomicInt64
func v2() {
	var (
		count atomic.Int64
		wg    sync.WaitGroup
	)

	arr := []int64{2, 4, 6, 8, 10}

	for _, now := range arr {
		// добавление в группу синхронизации("увеличение" счётчика работающих горутин)
		wg.Add(1)

		go func(now int64) {
			// удаление из группы синхронизации("уменьшение" счётчика работающих горутин)
			defer wg.Done()
			// используя атомарную операцию сложения, прибавлям к count очередной квадрат
			count.Add(now * now)
		}(now)
	}

	// ождание заврешения всех горутин
	wg.Wait()
	fmt.Println(count.Load())
}

func v3() {
	var (
		count int64
		mu    sync.Mutex
		wg    sync.WaitGroup
	)

	arr := []int64{2, 4, 6, 8, 10}

	for _, now := range arr {
		// добавление в группу синхронизации("увеличение" счётчика работающих горутин)
		wg.Add(1)

		go func(now int64) {
			// удаление из группы синхронизации("уменьшение" счётчика работающих горутин)
			defer wg.Done()
			// лочим мьютекс
			mu.Lock()
			// обнавляем переменную
			count += now * now
			// разлочили мьютекс
			mu.Unlock()
		}(now)
	}

	// ождание заврешения всех горутин
	wg.Wait()
	fmt.Println(count)
}

func main() {
	v1()
	v2()
	v3()
}
